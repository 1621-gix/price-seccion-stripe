<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Inc//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
    <dict>
        <key>PayloadVersion</key>
        <integer>1</integer>
        <key>PayloadDisplayName</key>
        <string>FrestyleðŸ‘¾</string>
        <key>el mejor Developers</key>
        <string>ConfðŸ¤‘</string>
        <key>PayloadUUID</key>
        <string>1111111</string>
        <key>PayloadIdentifier</key>
 <string>1</string>
        <key>PayloadType</key>
        <string>Configuration</string>
        <key>PayloadContent</key>
        <array>
            <dict>
                <key>DNSSettings</key>
                <dict>
                    <key>DNSProtocol</key>
                    <string>HTTPS</string>
                    <key>ServerURL</key>
                    <string>https://a15e718e.d.adguard-dns.com/dns-query</string>
                </dict>
                <key>PayloadVersion</key>
                <integer>1</integer>
                <key>PayloadDisplayName</key>
                <string>H4XðŸ”«</string>
                <key>el mejor</key>
                <string>GET UP</string>
                <key>PayloadIdentifier</key>
                <string>1</string>
                <key>PayloadUUID</key>
                <string>111111</string>
                <key>PayloadType</key>
                <string>com.apple.dnsSettings.managed</string>
            </dict>
        </array>
    </dict>
</plist>

</string>

// Variables used by Scriptable.
// These must be at the very top of the file. Do not edit.
// icon-color: blue; icon-glyph: file;

async function argsPrompt(message, isSecure) {
  let prompt = new Alert();
  prompt.message = message;
  prompt.addTextField(isSecure ? "" : "  CREADOR PLUSEED", "");
  prompt.addAction("OK");
  await prompt.presentAlert();
  return prompt.textFieldValue(0);
}3
widget = new ListWidget();
let backgroundImage = await loadImage("https://i.ibb.co/2q8xPTC/BBB93-F85-69-A5-444-C-AC90-C97-D525-C69-F3.jpg");
widget.backgroundImage = backgroundImage;
widget.setPadding(0, 0, 0, 0);

title = widget.addText("                          ig/tk @idk_19_ff                         ");
title.font = Font.boldSystemFont(17);
title.textColor = Color.white();

widget.addSpacer();

let stack1 = widget.addStack();
stack1.layoutHorizontally();
stack1.addSpacer();
let mofscrButton = stack1.addText("        ");
mofscrButton.textColor = Color.red();
mofscrButton.url = "scriptable:///run/filePicker?path=/var/mobile/Library/Plus/YjAzNmYxYTZkYjdlYTY0OTFjNjMyZTgxNTQyNWE2MjJlNDE3MTg2OA%3D%3D.txt";

let frigameButton = stack1.addText("           ");
frigameButton.textColor = Color.white();
frigameButton.url = "scriptable:///run/filePicker?path=/var/mobile/Library/Plus/YjAzNmYxYTZkYjdlYTY0OTFjNjMyZTgxNTQyNWE2MjJlNDE3MTg2OA%3D%3D.txt";


stack1.addSpacer();

widget.addSpacer();

let stack2 = widget.addStack();
stack2.layoutHorizontally();
stack2.addSpacer();

let powerxButton = stack2.addText("    ");
powerxButton.textColor = Color.white();
powerxButton.url = "scriptable:///run/filePicker?path=/var/mobile/Library/Plus/NTI2MzljMTg2NmViZTA1OGM2ODEyOTgwYzI2NjEwNTI1YWIxMmVkNjQwOGZhMzI3ZjgwNTg4OTZm%0D%0AN2Q0ODczYQ%3D%3D";

let fixlagButton = stack2.addText("          ");
fixlagButton.textColor = Color.white();
fixlagButton.url = "scriptable:///run/filePicker?path=/var/mobile/Library/Plus/YmVhZTE0ZDQ0MDBjNzM3MTAzYjgxZjU4YWU4YjFlNDc%3D.txt";

stack2.addSpacer();

widget.addSpacer();

let exitButton = widget.addText(".                  ðŸ›’");
exitButton.textColor = Color.white();
exitButton.url = "https://www.instagram.com/idk_19_ff?igsh=MTcyYWpnMGhxaHFwbA%3D%3D&utm_source=qr";


exitButton.lineLimit = 1;

widget.presentMedium();

Script.complete();

async function loadImage(url) {
  const request = new Request(url);
  return await request.loadImage();
}

const gameConfig = {
  gameassetbundles: {
    config: {
      Open: {
        "iOS Mocha VNC Lite": "ANTIBAN 100% |",
        "iOS Mocha VNC Lite sensi": {
          TimeToMaximumSpeed: 0b0000009000,
        },
        "iOS Mocha VNC Lite >FILE<FREEFIRE<\<FILE>FREEFIRE<\>": "AIMBOT_HEAD+AIMLOCK_HEAD+NO_RECOIL+AIMFOV",
        AIMLOCK_HEAD: {},
        AIMBOT_HEAD: {},
        AIMFOV: {},
        NO_RECOIL: {},
        SENSI: {}
      },
    },
  },
};

// Lista de armas
const gunList = [
    "M1887", "M1887-X", "SPAS12", "M1014", "MAG-7", "CHARGEBUSTER", "TROGON", "UMP", "MP5", "VSS", "MP40", 
    "P90", "CG15", "THOMPSON", "BIZON", "VECTOR", "MAC10", "M4A1", "AK47", "M14", "SCAR", "GROZA", "SKS", 
    "M249", "FAMAS", "SVD", "XM8", "M60", "AN94", "PLASMA", "AUG", "PARAFAL", "WOODPECKER", "KORD", 
    "KINGFISHER", "GROZA-X", "M249-X", "SVD-Y", "G36", "AC80", "ARMAESCUDO", "AWM", "AWM-Y", "KAR98K", 
    "M828", "M24", "USP", "DESERTEAGLE", "G18", "M1873", "M500", "M1917", "USP-2", "MINIUZI"
];

// Llenar las acciones para AIMLOCK_HEAD
gunList.forEach(gun => {
    gameConfig.gameassetbundles.config.Open.AIMLOCK_HEAD[`AIMLOCK_HEAD_iOS_gun:${gun}`] = {
        [gun]: 99.9,
        true: true
    };
});

// Llenar las acciones para AIMBOT_HEAD
gunList.forEach(gun => {
    gameConfig.gameassetbundles.config.Open.AIMBOT_HEAD[`AIMBOT_HEAD_iOS_gun:${gun}`] = {
        [gun]: 99.9,
        true: true
    };
});

// Llenar las acciones para AIMFOV
gunList.forEach(gun => {
    gameConfig.gameassetbundles.config.Open.AIMFOV[`AIMFOV_iOS_gun:${gun}`] = {
        [gun]: 100.0,
        true: true
    };
});

// Llenar las acciones para NO_RECOIL
gunList.forEach(gun => {
    gameConfig.gameassetbundles.config.Open.NO_RECOIL[`NO_RECOIL_iOS_gun:${gun}`] = {
        [gun]: 100.0f,
        true: true
    };
});

// Llenar las acciones para SENSI
gunList.forEach(gun => {
    gameConfig.gameassetbundles.config.Open.SENSI[`SENSI_iOS_gun:${gun}`] = {
        [gun]: 0b0000009000,
        true: true
    };
});

module.exports = gameConfig;